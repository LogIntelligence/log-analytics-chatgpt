,EventTemplate,Occurrences
0,"setSystemUiVisibility vis=<*> mask=<*> oldVal=<*> newVal=<*> diff=<*> fullscreenStackVis=<*> dockedStackVis=<*>, fullscreenStackBounds=<*>, dockedStackBounds=<*>",200
1,setLightsOn(<*>),181
2,"ready=<*>,policy=<*>,wakefulness=<*>,wksummary=<*>,uasummary=<*>,bootcompleted=<*>,boostinprogress=<*>,waitmodeenable=<*>,mode=<*>,manual=<*>,auto=<*>,adj=<*>,userId=<*>",116
3,HBM brightnessIn =<*>,85
4,HBM brightnessOut =<*>,85
5,"Animating brightness: target=<*>, rate=<*>",85
6,<*>,84
7,"ready=<*>,policy=<*>,wakefulness=<*>,wksummary=<*>,uasummary=<*>,bootcompleted=<*>,boostinprogress=<*>,waitmodeenable=<*>,mode=<*>,manual=<*>,auto=<*>,adj=<*>=<*>",83
8,"userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=<*>, uid=<*>",69
9,"updateClipping isOverlap:<*>, getTopPadding=<*>, Translation=<*>",65
10,updateDimmedActivatedHideSensitive overlap:<*>,65
11,"Skipping, withExcluded: <*>, tr.intent:<*>",63
12,getRunningAppProcesses: caller <*> does not hold <*>; <*>,56
13,<*>...,39
14,shouldBlockLocation running ...,37
15,shouldBlockLocation ret:<*>,37
16,getTasks: caller <*> does not hold <*>; limiting output,37
17,"Releasing suspend blocker ""<*>"".",33
18,"Acquiring suspend blocker ""<*>"".",33
19,"acquire lock=<*>, flags=<*>, tag=""<*>"", name=<*>, ws=<*>, uid=<*>, pid=<*>",26
20,getRunningAppProcesses: caller <*> does not hold <*>; limiting output,25
21,"cancelNotification,index:<*>",23
22,Destroying surface Surface(name=<*>) called by <*>,21
23,cancelPeek: <*>,20
24,"cancelNotificationWithTag pid <*>,uid = <*>,tag = <*>,pkg =<*>,id =<*>",20
25,"notifyUiVisibilityChanged:vis=<*>, SystemUiVisibility=<*>",19
26,"release:lock=<*>, flg=<*>, tag=""<*>"", name=""<*>"", ws=<*>, uid=<*>, pid=<*>",15
27,interceptKeyTq keycode=<*> interactive=<*> keyguardActive=<*> policyFlags=<*> down <*> canceled <*>,14
28,"interceptKeyBeforeQueueing: key <*> , result : <*>",14
29,"getRecentTasks: num=<*>,flags=<*>,totalTasks=<*>",14
30,"overlapAmount:<*>, previousNotificationEnd:<*>, newYTranslation:<*>, location:<*>, i:<*>, getTopPadding:<*>, getLocationOnScreen():<*>",13
31,"state.clipTopAmount:<*>, i:<*>",13
32,"updateNotificationShade: total=<*>, active=<*>",13
33,getRecentTasks: topActivity=ComponentInfo<*>/<*>,13
34,closeQs,12
35,"release:lock=<*>, flg=<*>, tag=""<*>"", name=<*>, ws=<*>, uid=<*>, pid=<*>",11
36,playSoundEffect effectType: <*>,10
37,getLastAudibleStreamVolume treamType: <*>,9
38,"animateCollapsePanels:flags=<*>, force=<*>, delayed=<*>, mExpandedVisible=<*>",8
39,The <*> caused us to need to do a <*> <*>,7
40,"updateLightsLocked,mInCall =<*>,mScreenOn = <*>,ledNotification == <*>",6
41,"updateLightsLocked,turn off <*>",6
42,logNotificationVisibilityChanges <*> start,6
43,onNotificationVisibilityChanged called,6
44,logNotificationVisibilityChanges <*> <*> <*>,6
45,cleanUpApplicationRecord -- <*>,6
46,"cleanUpApplicationRecordLocked, pid: <*>, restart: <*>",6
47,"cleanUpApplicationRecordLocked, reset pid: <*>, euid: <*>",6
48,stopWifiDisplayScanLocked record.mWifiDisplayScanRequested=<*>,6
49,stopWifiDisplayScanLocked mWifiDisplayScanRequestCount=<*>,6
50,getNeighboringCellInfo calling app is <*>,5
51,The <*> in <*> caused us to need to do a <*> <*>,5
52,mVisiblity.getValue is <*>,4
53,"ActivityRecord info: ActivityInfo{<*> <*>}, euid: <*>",4
54,"Taking screenshot from Surface with crop:[<*>], width:[<*>], height:[<*>], minLayer:[<*>], maxLayer:[<*>], inRotation:[<*>], rot:[<*>]",4
55,makeExpandedInvisible: mExpandedVisible=<*>,4
56,"ActivityManagerService,attachApplication,callingPid = <*>",4
57,visible is <*>,3
58,"rotationForOrientationLw(orient=<*>, last=<*>); user=<*> <*>",3
59,"Application requested orientation <*>, got rotation <*> which has compatible metrics",3
60,disable: < expand <*> alerts <*> back home recent clock navigationbar search quick_settings >,3
61,registerCallback not in <*>.,3
62,android.util.AndroidRuntimeException: Must execute in UI,3
63,"onInterceptTouchEvent MotionEvent { action=<*>, actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>, y[<*>]=<*>, toolType[<*>]=<*>, buttonState=<*>, metaState=<*>, flags=<*>, edgeFlags=<*>, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=<*> }, mBlockTouches=<*>",3
64,disable: <*>,3
65,"sending alarm Alarm{$<*> type $<*> when $<*> PendingIntent{$<*>: PendingIntentRecord{$<*> android broadcastIntent}}},repeatInterval = $<*>,listenerTag =$<*>",3
66,Received <*> alarm; rescheduling,3
67,scheduleTimeTickEvent triggerAtTime = <*>,3
68,received broadcast <*>,3
69,Destroying surface Surface(name=<*>) called by <*> <*> <*> <*> <*> <*> <*> <*>,3
70,getAllCellInfo is blocked by permission manager . callingPackage = <*>,3
71,Skipping AppWindowToken{$<*> ActivityRecord{$<*> $<*>/$<*> t$<*>}} -- going to hide,2
72,Skipping AppWindowToken{<placeholder> token=Token{<placeholder> ActivityRecord{<placeholder>}}} -- going to hide,2
73,"onTouchEvent::<*>, x=<*>, y=<*>",2
74,"flingToHeight: vel=<*>, expand=<*>, target=<*>, collapseSpeedUpFactor=<*>, expandBecauseOfFalsing=<*>",2
75,Sending non-protected broadcast <*> from system <*> pkg <*>,2
76,*** unregister callback for <*>,2
77,"cancelNotification,cancelNotificationLocked,callingUid = <*>,callingPid = <*>",2
78,"cancelNotificationLocked called,tell the app,reason = <*>",2
79,cancelNotificationLocked:<*>|<*>|<*>|<*>|<*>,2
80,"cancelNotificationLocked,remove =<*>",2
81,applyOptionsLocked: Unknown animationType=<*>,2
82,removeNotification:<*>|<*>|<*>|<*>|<*>,2
83,setWiredDeviceConnectionState type: <*> state: <*>,2
84,getDevicesForStream streamType: <*>,2
85,enqueueNotificationInternal: n.getKey = <*>|<*>|<*>|<*>|<*>,2
86,addNotification key=<*>|<*>|<*>|<*>|<*>,2
87,Marking notification as seen <*>|<*>|<*>|<*>|<*>,2
88,onNotificationExpansionChanged called,2
89,"ACTIVITY check resid: <*>, size=<*>",2
90,RefreshBatteryInfo isBatteryLow: <*>,2
91,"printFreezingDisplayLogsopening app wtoken = AppWindowToken{$<*> token=Token{$<*> ActivityRecord{$<*> u0 com.tencent.qt.qtl/.activity.info.NewsDetailXmlActivity t761}}}, allDrawn= $<*>, startingDisplayed = $<*>, startingMoved = $<*>, isRelaunching = $<*>",1
92,visible is system.call.count gt <*>,1
93,visible is system.message.count gt <*>,1
94,<*> is <*>,1
95,Destroying surface Surface(name=<*>) called by <*> <*> <*> <*> <*> <*> <bottom of call stack> <bottom of call stack>,1
96,"orientation change is complete, call <*>",1
97,Screen frozen for <*> due to <*>,1
98,startAnimation <*>,1
99,startAnimation <*> end,1
100,remove(PendingIntent{$<*>: PendingIntentRecord{$<*> $<*> $<*>}} changed bounds; rebatching),1
101,Bad activity token: <*>,1
102,java.lang.ClassCastException: <*> cannot be cast to <*>,1
103,onTrackingStopped: <*>,1
104,isSimPinSecure mSimDatas is <*>,1
105,*** register callback for <*>,1
106,[PhoneIntfMgr] getDataEnabled: subId=<*> phoneId=<*>,1
107,[PhoneIntfMgr] getDataEnabled: subId=<*> retVal=<*>,1
108,"onInterceptTouchEvent MotionEvent { action=<*>, actionButton=<*>, id[<*>]={id[<*>]}, x[<*>]={x[<*>]}, y[<*>]={y[<*>]}, toolType[<*>]={toolType[<*>]}, buttonState=<*>, metaState=<*>, flags=<*>, edgeFlags=<*>, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=<*> }, mBlockTouches=<*>",1
109,START u0 {act=___ flg=___ cmp=___ (has extras)} from uid ___ on display ___,1
110,<*> called,1
111,"Start dump, calling from : pid=<*>, uid=<*>",1
112,setSpeakerphoneOn on: <*>,1
113,setSpeakerphoneOn on:<*>,1
114,"sending alarm Alarm{$<*> type $<*> when $<*> PendingIntent{$<*>: PendingIntentRecord{$<*> $<*>}},repeatInterval = $<*>,listenerTag =$<*>",1
115,Killing <*>/<*> (adj <*>): <*> for <*>,1
116,remove(PendingIntent{$<*>: PendingIntentRecord{$<*> $<*> $<*>}}) changed bounds; rebatching,1
117,Unable to start service Intent { act=___ cmp=___ } U=___: not found,1
118,"[HSM] stayAwake <*> uid: <*>, pid: <*>",1
119,Pid:<*> MediaPlayer destructor,1
120,Process <*> (pid <*>) has died,1
121,Scheduling restart of crashed service <*> in <*>,1
122,"new Process app=ProcessRecord{$<*> <*>:$<*>:$<*>/u0$<*>}, name: $<*>:$<*>, euid: $<*>",1
123,Start proc <*> for service <*>,1
124,enqueueNotificationInternal: pkg=<*> id=<*> notification=<*>,1
125,START u0 {act=___ cat=[___] flg=___ cmp=___ bnds=[___][___]} from uid ___ on display ___,1
126,getRecentTasks: topActivity=ComponentInfo{<*>}/{<*>}},1
127,START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.tencent.mobileqq/.activity.SplashActivity bnds=[<*>][<*>]} from uid <*> on display <*>,1
128,getCellLocation is blocked by permission manager uid:<*> pid:<*>,1
129,"setDataSource(<*>, <*>, <*>)",1
130,getStreamVolume treamType: <*>,1
131,"updateIsPoweredLocked: wasPowered=<*>, mIsPowered=<*>, oldPlugType=<*>, mPlugType=<*>, mBatteryLevel=<*>",1
132,received broadcast <*> android.intent.action.BATTERY_CHANGED,1
133,ACTION_BATTERY_CHANGED AMP: <*>; Volt: <*>,1
134,updateChargingLocked: charging=<*>,1
135,"onReceive, action:<*>",1
136,ACTION_BATTERY_CHANGED pluggedType: <*>,1
137,ApStaDisabledState what=<*>,1
138,DefaultState what=<*>,1
139,battery changed pluggedType: <*>,1
140,ChargingSpeed Wattage: <*> ST: <*> --> <*>,1
141,enqueueNotificationInternal: pkg=<*> id=<*> notification=Notification(pri=<*> contentView=<*> vibrate=<*> sound=<*> tick defaults=<*> flags=<*> color=<*> category=<*> vis=<*>),1
142,"sending alarm Alarm{$<*> type $<*> when $<*> PendingIntent{$<*>}},repeatInterval = $<*>,listenerTag =$<*>",1
143,START u0 {flg=<flags> cmp=<component>} from uid <uid> on display <display>,1
144,startActivity called from non-Activity context; forcing Intent.FLAG_ACTIVITY_NEW_TASK for: Intent { flg=0x24000000 cmp=<*> (has extras) },1
145,onNotificationClick called,1
